spring.application.name=Sbb

# thymeleaf
spring.thymeleaf.cache=false

# DATABASE
# H2 콘솔에 접속할 것인지 (H2 콘솔은 H2 데이터베이스를 웹 UI로 보여줌)
spring.h2.console.enabled=true
# H2 콘솔로 접속하기 위한 URL 경로
spring.h2.console.path=/h2-console
# 데이터베이스에 접속하기 위한 경로   (local.mv.db 생성 필요)
spring.datasource.url=jdbc:h2:~/local
# 데이터베이스에 접속할 때 사용하는 드라이버 클래스명
spring.datasource.driverClassName=org.h2.Driver
# 데이터베이스의 사용자명 (기본값 sa)
spring.datasource.username=sa
# 데이터베이스 비밀번호 (이 프로젝트는 로컬 개발 용도이므로 설정 안 함)
spring.datasource.password=

# JPA
# 스프링 부트와 하이버네이트 함께 사용 시 필요한 설정
#    - 표준 SQL이 아닌 하이버네이트만의 SQL을 사용할 때 필요한 항목으로
#      하이버네이트만의 org.hibernate.dialect.H2Dialect 클래스 설정
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.H2Dialect
# 엔티티를 기준으로 데이터의 테이블을 생성하는 규칙 설정
spring.jpa.hibernate.ddl-auto=update
# SQL 포맷 출력 여부
spring.jpa.properties.hibernate.format_sql=true
# SQL 로그 출력 여부
spring.jpa.properties.hibernate.show_sql=true

# spring.jpa.hibernate.ddl-auto
# 1. none : 엔티티가 변경되더라도 데이터베이스를 변경하지 않음
# 2. update : 엔티티의 변경된 부분만 데이터베이스에 적용
# 3. validate: 엔티티와 테이블 간에 차이점이 있는지 검사만 한다.
# 4. create: 스프링 부트 서버를 시작할 때 테이블을 모두 삭제한 후 다시 생성한다.
# 5. create-drop: create와 동일하지만 스프링 부트 서버를 종료할 때에도 테이블을 모두 삭제한다.
# 개발 환경에서는 update, 운영 환경에서는 none 또는 validate 사용